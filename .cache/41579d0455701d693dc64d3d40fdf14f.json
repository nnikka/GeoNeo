{"dependencies":[{"name":"C:\\Users\\nikak\\Desktop\\front\\geoneo\\package.json","includedInParent":true,"mtime":1538228850173},{"name":"C:\\Users\\nikak\\Desktop\\front\\geoneo\\node_modules\\gl-quat\\package.json","includedInParent":true,"mtime":1538228300026}],"generated":{"js":"module.exports = fromMat3\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nfunction fromMat3 (out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8]\n  var fRoot\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0)  // 2w\n    out[3] = 0.5 * fRoot\n    fRoot = 0.5 / fRoot  // 1/(4w)\n    out[0] = (m[5] - m[7]) * fRoot\n    out[1] = (m[6] - m[2]) * fRoot\n    out[2] = (m[1] - m[3]) * fRoot\n  } else {\n    // |w| <= 1/2\n    var i = 0\n    if (m[4] > m[0]) {\n      i = 1\n    }\n    if (m[8] > m[i * 3 + i]) {\n      i = 2\n    }\n    var j = (i + 1) % 3\n    var k = (i + 2) % 3\n\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0)\n    out[i] = 0.5 * fRoot\n    fRoot = 0.5 / fRoot\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot\n  }\n\n  return out\n}\n","map":{"mappings":[{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"..\\node_modules\\gl-quat\\fromMat3.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}}],"sources":{"..\\node_modules\\gl-quat\\fromMat3.js":"module.exports = fromMat3\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nfunction fromMat3 (out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8]\n  var fRoot\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0)  // 2w\n    out[3] = 0.5 * fRoot\n    fRoot = 0.5 / fRoot  // 1/(4w)\n    out[0] = (m[5] - m[7]) * fRoot\n    out[1] = (m[6] - m[2]) * fRoot\n    out[2] = (m[1] - m[3]) * fRoot\n  } else {\n    // |w| <= 1/2\n    var i = 0\n    if (m[4] > m[0]) {\n      i = 1\n    }\n    if (m[8] > m[i * 3 + i]) {\n      i = 2\n    }\n    var j = (i + 1) % 3\n    var k = (i + 2) % 3\n\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0)\n    out[i] = 0.5 * fRoot\n    fRoot = 0.5 / fRoot\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot\n  }\n\n  return out\n}\n"},"lineCount":50}},"hash":"95a4344907700dcc9d0aecfa209f58a7","cacheData":{"env":{}}}
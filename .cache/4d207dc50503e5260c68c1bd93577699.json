{"dependencies":[{"name":"C:\\Users\\nikak\\Desktop\\front\\geoneo\\package.json","includedInParent":true,"mtime":1538228850173},{"name":"C:\\Users\\nikak\\Desktop\\front\\geoneo\\node_modules\\gl-quat\\package.json","includedInParent":true,"mtime":1538228300026}],"generated":{"js":"module.exports = slerp\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nfunction slerp (out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n\n  var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n    bx = b[0], by = b[1], bz = b[2], bw = b[3]\n\n  var omega, cosom, sinom, scale0, scale1\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw\n  // adjust signs (if necessary)\n  if (cosom < 0.0) {\n    cosom = -cosom\n    bx = -bx\n    by = -by\n    bz = -bz\n    bw = -bw\n  }\n  // calculate coefficients\n  if ((1.0 - cosom) > 0.000001) {\n    // standard case (slerp)\n    omega = Math.acos(cosom)\n    sinom = Math.sin(omega)\n    scale0 = Math.sin((1.0 - t) * omega) / sinom\n    scale1 = Math.sin(t * omega) / sinom\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t\n    scale1 = t\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx\n  out[1] = scale0 * ay + scale1 * by\n  out[2] = scale0 * az + scale1 * bz\n  out[3] = scale0 * aw + scale1 * bw\n\n  return out\n}\n","map":{"mappings":[{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"..\\node_modules\\gl-quat\\slerp.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}}],"sources":{"..\\node_modules\\gl-quat\\slerp.js":"module.exports = slerp\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nfunction slerp (out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n\n  var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n    bx = b[0], by = b[1], bz = b[2], bw = b[3]\n\n  var omega, cosom, sinom, scale0, scale1\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw\n  // adjust signs (if necessary)\n  if (cosom < 0.0) {\n    cosom = -cosom\n    bx = -bx\n    by = -by\n    bz = -bz\n    bw = -bw\n  }\n  // calculate coefficients\n  if ((1.0 - cosom) > 0.000001) {\n    // standard case (slerp)\n    omega = Math.acos(cosom)\n    sinom = Math.sin(omega)\n    scale0 = Math.sin((1.0 - t) * omega) / sinom\n    scale1 = Math.sin(t * omega) / sinom\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t\n    scale1 = t\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx\n  out[1] = scale0 * ay + scale1 * by\n  out[2] = scale0 * az + scale1 * bz\n  out[3] = scale0 * aw + scale1 * bw\n\n  return out\n}\n"},"lineCount":52}},"hash":"9f079fd230fb3b323bd27922c30ffa1c","cacheData":{"env":{}}}